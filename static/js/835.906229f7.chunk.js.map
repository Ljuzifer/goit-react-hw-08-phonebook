{"version":3,"file":"static/js/835.906229f7.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/CountOfContacts/CountOfContacts.styled.js","components/CountOfContacts/CountOfContacts.jsx","components/Message/Message.jsx","pages/Contacts.styled.js","pages/Contacts.jsx","redux/contacts/selectors.js"],"sourcesContent":["import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormThumb = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  background-color: rgba(202, 202, 202, 0.8);\n  width: 480px;\n  margin: auto;\n  border: 2px outset black;\n  border-radius: 13px;\n  padding: 20px 28px;\n  margin-bottom: 28px;\n\n  /* transform: scale(0.5);\n  opacity: 0.3;\n  transition: transform 1.5s cubic-bezier(0.4, 0, 0.2, 1),\n    opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1);\n    opacity: 1;\n  } */\n\n  button {\n    font-weight: bold;\n    margin-bottom: 28px;\n    padding: 4px 8px;\n    border-radius: 22px;\n    text-transform: uppercase;\n    background-color: rgba(144, 144, 144, 0.8);\n  }\n\n  button:hover,\n  button:focus {\n    background-color: black;\n    color: white;\n  }\n\n  label {\n    font-style: oblique;\n    font-weight: 500;\n    margin-bottom: 13px;\n\n    b {\n      font-size: 13px;\n      font-style: normal;\n      font-weight: 500;\n      color: darkred;\n      text-transform: lowercase;\n    }\n\n    input {\n      margin-top: 8px;\n      width: 100%;\n      padding: 2px 13px;\n      border-radius: 13px;\n      outline: none;\n      text-align: center;\n      /* background-color: rgba(255, 255, 255, 0); */\n    }\n  }\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { fetchAddContact } from 'redux/contacts/operations';\nimport { FormThumb } from './ContactForm.styled';\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$/,\n      'Wrong name format'\n    )\n    .required('Must be filled'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Wrong number format'\n    )\n    .required('Must be filled'),\n});\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = { name: '', number: '' };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={formSchema}\n      onSubmit={(values, actions) => {\n        const enteredName = values.name;\n\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === enteredName.toLowerCase()\n          )\n        ) {\n          alert(`${enteredName} is already in contacts.`);\n          return;\n        }\n\n        dispatch(fetchAddContact({ ...values }));\n        actions.resetForm();\n      }}\n    >\n      <FormThumb>\n        <label>\n          Name\n          <Field name=\"name\" placeholder=\"Enter name\" />\n          <ErrorMessage name=\"name\" component=\"b\" />\n        </label>\n\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" placeholder=\"Enter number\" />\n          <ErrorMessage name=\"number\" component=\"b\" />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </FormThumb>\n    </Formik>\n  );\n}\n","import { HiMicrophone } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\n// import { Link } from 'react-router-dom';\nimport { fetchDeleteContact } from 'redux/contacts/operations';\n// import { deleteContact } from 'redux/contactsSlice';\n// import { deleteContact } from 'redux/actions';\n\nexport default function ContactItem({ contact }) {\n  // const contacts = useSelector(getContacts);\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const onContactDelete = () => dispatch(fetchDeleteContact(id));\n\n  return (\n    <>\n      <HiMicrophone />\n      <span>{name}</span>\n      <div>\n        <span>{number} </span>\n        <button type=\"button\" onClick={onContactDelete}>\n          Delete\n        </button>\n      </div>\n    </>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 666px;\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  margin: auto;\n  font-weight: 500;\n  /* font-style: oblique; */\n\n  li {\n  }\n`;\n\nexport const ListItemLink = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: black;\n  border: 2px outset darkgrey;\n  padding: 2px;\n  padding-left: 8px;\n  border-radius: 18px;\n  text-decoration: none;\n  cursor: pointer;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  span {\n    font-size: 18px;\n    font-weight: 700;\n    margin-left: 13px;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n      'Lucida Sans', Arial, sans-serif;\n    margin-right: auto;\n  }\n\n  div {\n    display: flex;\n    align-items: center;\n  }\n\n  div span {\n    color: whitesmoke;\n    /* padding: 2px; */\n  }\n\n  button {\n    font-size: 13px;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n      'Lucida Sans', Arial, sans-serif;\n    margin-left: 40px;\n    padding: 2px 8px;\n    color: white;\n    background-color: black;\n    border-radius: 13px;\n    transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover {\n      background-color: transparent;\n      color: buttonborder;\n      transform: scale(1.2);\n    }\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { List, ListItemLink } from './ContactList.styled';\n// import { useEffect } from 'react';\n// import { fetchContacts } from 'redux/contacts/operations';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ContactList() {\n  // const dispatch = useDispatch();\n  // const navigate = useNavigate();\n  const location = useLocation();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  // useEffect(() => {\n  //   dispatch(fetchContacts());\n  // }, [dispatch]);\n\n  // const handleContactClick = contactId => {\n  //   navigate(`/contacts/${contactId}`);\n  // };\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <li key={contact.id}>\n          <ListItemLink\n            to={`/contacts/${contact.id}`}\n            state={{ from: location }}\n          >\n            <ContactItem contact={contact} />\n          </ListItemLink>\n        </li>\n      ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Search = styled.div`\n  input {\n    margin-top: 8px;\n    margin-bottom: 22px;\n    width: 480px;\n    padding: 2px 13px;\n    border-radius: 13px;\n    text-align: center;\n    outline: none;\n  }\n\n  ::placeholder {\n    text-align: center;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { searchFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Search } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilter = newSymbol => {\n    dispatch(searchFilter(newSymbol));\n  };\n\n  return (\n    <Search>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => onChangeFilter(e.target.value)}\n        placeholder=\"Search...\"\n      />\n    </Search>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const ItemsCount = styled.span`\n  display: inline-flex;\n  justify-content: space-between;\n  /* align-items: center; */\n  width: 333px;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 600;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectTotalContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { ItemsCount } from './CountOfContacts.styled';\n\nexport default function CountOfContacts() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const totalContacts = useSelector(selectTotalContacts);\n\n  return (\n    <>\n      <ItemsCount>\n        <div>\n          Total contacts:<b> {totalContacts}</b>\n        </div>{' '}\n        <div>\n          Shown contacts:\n          <b> {visibleContacts.length}</b>\n        </div>\n      </ItemsCount>\n    </>\n  );\n}\n","export default function Message({ message }) {\n  return (\n    <>\n      <b>{message}</b>\n    </>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const ContactsGlobalStyle = createGlobalStyle`\nbody{\n      background-image: url('https://bogatyr.club/uploads/posts/2023-03/1679420906_bogatyr-club-p-biblioteka-oboi-foni-pinterest-1.jpg');\n}`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport CountOfContacts from 'components/CountOfContacts/CountOfContacts';\nimport Message from 'components/Message/Message';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectTotalContacts } from 'redux/contacts/selectors';\nimport { Box } from 'components/GlobalStyle';\nimport { ContactsGlobalStyle } from './Contacts.styled';\nimport { Toaster } from 'react-hot-toast';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contactsLength = useSelector(selectTotalContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box>\n      <Helmet title=\"Your contacts\" />\n\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <CountOfContacts />\n      <Filter />\n      {contactsLength === 0 ? (\n        <Message message=\"Oops! Contact's list is empty...\" />\n      ) : (\n        <ContactList />\n      )}\n      <ContactsGlobalStyle />\n      <Toaster />\n    </Box>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectTotalContacts = state => state.contacts.items.length;\n\nexport const selectContactsStatus = state => state.contacts.isLoading;\n\nexport const selectContactsError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterField) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterField.toLowerCase())\n    )\n);\n"],"names":["FormThumb","styled","Form","_templateObject","_taggedTemplateLiteral","formSchema","Yup","shape","name","matches","required","number","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","enteredName","some","contact","toLowerCase","alert","concat","fetchAddContact","_objectSpread","resetForm","children","_jsxs","Field","placeholder","ErrorMessage","component","type","ContactItem","_ref","id","_Fragment","HiMicrophone","onClick","fetchDeleteContact","List","ListItemLink","Link","_templateObject2","ContactList","location","useLocation","visibleContacts","selectVisibleContacts","map","to","state","from","Search","Filter","filter","selectFilter","value","onChange","e","newSymbol","target","searchFilter","ItemsCount","CountOfContacts","totalContacts","selectTotalContacts","length","Message","message","ContactsGlobalStyle","createGlobalStyle","Contacts","contactsLength","useEffect","fetchContacts","Box","Helmet","title","Toaster","items","createSelector","filterField","includes"],"sourceRoot":""}