{"version":3,"file":"static/js/26.30c8ba93.chunk.js","mappings":"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","sources":["components/TaskItem/TaskItem.styled.js","components/TaskItem/TaskItem.jsx","redux/tasks/selectors.js","components/TaskList/TaskList.styled.js","components/TaskList/TaskList.jsx","hooks/useTasks.js","components/TaskEditor/TaskEditor.styled.js","components/TaskEditor/TaskEditor.jsx","pages/Tasks.styled.js","pages/Tasks.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const TaskThumb = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 4px;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n`;\n\nexport const Text = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const DelButton = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  margin-left: auto;\n  border-radius: 4px;\n  padding: 8px 12px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteTask } from 'redux/tasks/operations';\n// import { deleteTask } from 'redux/tasks/operations';\n// import css from './Task.module.css';\nimport { DelButton, TaskThumb, Text } from './TaskItem.styled';\n\nexport default function TaskItem({ id, text }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <TaskThumb>\n      <Text>{text}</Text>\n      <DelButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </DelButton>\n    </TaskThumb>\n  );\n}\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","import { styled } from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 12px;\n`;\n","// import { useSelector } from 'react-redux';\n// import { Task } from '../Task/Task';\n// import { selectAllTasks } from 'redux/tasks/selectors';\nimport TaskItem from 'components/TaskItem/TaskItem';\nimport { useTasks } from 'hooks/useTasks';\nimport { List } from './TaskList.styled';\n// import { TaskList } from './TaskList.styled';\n// import css from './TaskList.module.css';\n\nexport default function TaskList() {\n  //   const tasks = useSelector(selectAllTasks);\n  const { tasks } = useTasks();\n\n  return (\n    <List>\n      {tasks.map(({ id, text }) => (\n        <li key={id}>\n          <TaskItem id={id} text={text} />\n        </li>\n      ))}\n    </List>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport {\n  selectAllTasks,\n  selectFilter,\n  selectLoading,\n} from 'redux/tasks/selectors';\n\nexport const useTasks = () => {\n  const tasks = useSelector(selectAllTasks);\n  const filter = useSelector(selectFilter);\n  const loading = useSelector(selectLoading);\n\n  return {\n    tasks,\n    filter,\n    loading,\n  };\n};\n","import { styled } from 'styled-components';\n\nexport const EditForm = styled.form`\n  display: flex;\n  width: 100%;\n  gap: 4px;\n  margin-bottom: 12px;\n`;\n\nexport const EditInput = styled.input`\n  flex-grow: 1;\n  padding: 8px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n`;\n\nexport const EditButton = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\nimport { EditButton, EditForm, EditInput } from './TaskEditor.styled';\n\nexport default function TaskEditor() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <EditForm onSubmit={handleSubmit}>\n      <EditInput name=\"text\" />\n      <EditButton type=\"submit\">Add task</EditButton>\n    </EditForm>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const TasksGlobalStyle = createGlobalStyle`\nbody{\n    background-image: url('https://kartinki.pics/uploads/posts/2021-07/1625655309_10-kartinkin-com-p-biblioteka-art-art-krasivo-11.jpg');\n}\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport TaskList from 'components/TaskList/TaskList';\nimport TaskEditor from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { selectLoading } from 'redux/tasks/selectors';\nimport { TasksGlobalStyle } from './Tasks.styled';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet title=\"Your tasks\" />\n\n      <TaskEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n      <TasksGlobalStyle />\n    </>\n  );\n}\n"],"names":["TaskThumb","styled","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","DelButton","_templateObject3","TaskItem","_ref","id","text","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","deleteTask","selectLoading","state","tasks","loading","selectFilter","filter","selectAllTasks","items","List","TaskList","useSelector","map","EditForm","EditInput","EditButton","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","TasksGlobalStyle","createGlobalStyle","Tasks","isLoading","useEffect","fetchTasks","_Fragment","Helmet","title"],"sourceRoot":""}