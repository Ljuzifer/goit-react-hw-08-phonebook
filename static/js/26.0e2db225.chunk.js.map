{"version":3,"file":"static/js/26.0e2db225.chunk.js","mappings":"8OAEaA,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAStBC,EAAOH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iDAKfG,EAAYL,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2U,SCRvB,SAASK,EAAQC,GAA2B,IAAxBC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UACrCC,GAAWC,EAAAA,EAAAA,MAIjB,OACEC,EAAAA,EAAAA,MAACf,EAAS,CAAAgB,SAAA,EACRC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,WAAWC,QAASP,EAAWQ,SAJ1B,WAAH,OAASP,GAASQ,EAAAA,EAAAA,IAAgBX,GAAK,KAKrDO,EAAAA,EAAAA,KAACb,EAAI,CAAAY,SAAEL,KACPM,EAAAA,EAAAA,KAACX,EAAS,CAACY,KAAK,SAASI,QAPR,WAAH,OAAST,GAASU,EAAAA,EAAAA,IAAWb,GAAK,EAODM,SAAC,aAKtD,CCtBO,I,QAAMQ,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,KAAM,ECEtCC,EAAO1B,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gICEd,SAASyB,IACtB,IAAQF,GCDMG,EAAAA,EAAAA,IAAYL,GDClBE,MAER,OACET,EAAAA,EAAAA,KAACU,EAAI,CAAAX,SACFU,EAAMI,KAAI,SAAArB,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAS,OAC/BK,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACT,EAAQ,CAACE,GAAIA,EAAIC,KAAMA,EAAMC,UAAWA,KADlCF,EAEJ,KAIb,CEdO,I,EAAMqB,EAAW9B,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iFAOtB6B,EAAY/B,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mMAWxB8B,EAAahC,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kTChBxB,SAAS+B,IACtB,IAAMrB,GAAWC,EAAAA,EAAAA,MAcjB,OACEC,EAAAA,EAAAA,MAACgB,EAAQ,CAACI,SAbS,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACT5B,EAAO2B,EAAKE,SAAS7B,KAAK8B,MAChC,GAAa,KAAT9B,EAGF,OAFAE,GAAS6B,EAAAA,EAAAA,IAAQ/B,SACjB2B,EAAKK,QAGPC,MAAM,yCACR,EAGmC5B,SAAA,EAC/BC,EAAAA,EAAAA,KAACe,EAAS,CAACa,KAAK,UAChB5B,EAAAA,EAAAA,KAACgB,EAAU,CAACf,KAAK,SAAQF,SAAC,eAGhC,CCvBO,IAAM8B,GAAmBC,EAAAA,EAAAA,IAAiB7C,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yJ,UCMlC,SAAS6C,IACtB,OACEjC,EAAAA,EAAAA,MAACkC,EAAAA,EAAG,CAAAjC,SAAA,EACFC,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,MAAM,gBAEdlC,EAAAA,EAAAA,KAACiB,EAAU,KACXjB,EAAAA,EAAAA,KAACW,EAAQ,KACTX,EAAAA,EAAAA,KAAC6B,EAAgB,MAGvB,C","sources":["components/TaskItem/TaskItem.styled.js","components/TaskItem/TaskItem.jsx","redux/tasks/selectors.js","components/TaskList/TaskList.styled.js","components/TaskList/TaskList.jsx","hooks/useTasks.js","components/TaskEditor/TaskEditor.styled.js","components/TaskEditor/TaskEditor.jsx","pages/Tasks.styled.js","pages/Tasks.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const TaskThumb = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 4px;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n`;\n\nexport const Text = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const DelButton = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  margin-left: auto;\n  border-radius: 4px;\n  padding: 8px 12px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteTask, toggleCompleted } from 'redux/tasks/tasksSlice';\n\n// import { deleteTask } from 'redux/tasks/operations';\n// import { deleteTask } from 'redux/tasks/operations';\n// import css from './Task.module.css';\nimport { DelButton, TaskThumb, Text } from './TaskItem.styled';\n\nexport default function TaskItem({ id, text, completed }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n  const handleToggle = () => dispatch(toggleCompleted(id));\n\n  return (\n    <TaskThumb>\n      <input type=\"checkbox\" checked={completed} onChange={handleToggle} />\n      <Text>{text}</Text>\n      <DelButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </DelButton>\n    </TaskThumb>\n  );\n}\n\n// import { useDispatch } from 'react-redux';\n// import { MdClose } from 'react-icons/md';\n// import { deleteTask, toggleCompleted } from 'redux/tasksSlice';\n// import css from './Task.module.css';\n\n// export const Task = ({ task }) => {\n//   const dispatch = useDispatch();\n\n//   const handleDelete = () => dispatch(deleteTask(task.id));\n\n//   const handleToggle = () => dispatch(toggleCompleted(task.id));\n\n//   return (\n//     <div className={css.wrapper}>\n//       <input\n//         type=\"checkbox\"\n//         className={css.checkbox}\n//         checked={task.completed}\n//         onChange={handleToggle}\n//       />\n//       <p className={css.text}>{task.text}</p>\n//       <button className={css.btn} onClick={handleDelete}>\n//         <MdClose size={24} />\n//       </button>\n//     </div>\n//   );\n// };\n","export const selectAllTasks = state => state.tasks;\n","import { styled } from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 12px;\n`;\n","import TaskItem from 'components/TaskItem/TaskItem';\nimport { useTasks } from 'hooks/useTasks';\nimport { List } from './TaskList.styled';\n\nexport default function TaskList() {\n  const { tasks } = useTasks();\n\n  return (\n    <List>\n      {tasks.map(({ id, text, completed }) => (\n        <li key={id}>\n          <TaskItem id={id} text={text} completed={completed} />\n        </li>\n      ))}\n    </List>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { selectAllTasks } from 'redux/tasks/selectors';\n\nexport const useTasks = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return tasks;\n};\n","import { styled } from 'styled-components';\n\nexport const EditForm = styled.form`\n  display: flex;\n  width: 100%;\n  gap: 4px;\n  margin-bottom: 12px;\n`;\n\nexport const EditInput = styled.input`\n  flex-grow: 1;\n  padding: 8px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n`;\n\nexport const EditButton = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/tasksSlice';\nimport { EditButton, EditForm, EditInput } from './TaskEditor.styled';\n\nexport default function TaskEditor() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <EditForm onSubmit={handleSubmit}>\n      <EditInput name=\"text\" />\n      <EditButton type=\"submit\">Add task</EditButton>\n    </EditForm>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const TasksGlobalStyle = createGlobalStyle`\nbody{\n    background-image: url('https://damion.club/uploads/posts/2022-09/1664292127_23-damion-club-p-biblioteka-art-instagram-30.jpg');\n}\n`;\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport TaskList from 'components/TaskList/TaskList';\nimport TaskEditor from 'components/TaskEditor/TaskEditor';\nimport { TasksGlobalStyle } from './Tasks.styled';\nimport { Box } from 'components/GlobalStyle';\n\nexport default function Tasks() {\n  return (\n    <Box>\n      <Helmet title=\"Your tasks\" />\n\n      <TaskEditor />\n      <TaskList />\n      <TasksGlobalStyle />\n    </Box>\n  );\n}\n"],"names":["TaskThumb","styled","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","DelButton","_templateObject3","TaskItem","_ref","id","text","completed","dispatch","useDispatch","_jsxs","children","_jsx","type","checked","onChange","toggleCompleted","onClick","deleteTask","selectAllTasks","state","tasks","List","TaskList","useSelector","map","EditForm","EditInput","EditButton","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","TasksGlobalStyle","createGlobalStyle","Tasks","Box","Helmet","title"],"sourceRoot":""}