{"version":3,"file":"static/js/910.959adf49.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/CountOfContacts/CountOfContacts.styled.js","components/CountOfContacts/CountOfContacts.jsx","components/Message/Message.jsx","pages/Contacts.styled.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectTotalContacts = state => state.contacts.items.length;\n\nexport const selectContactsStatus = state => state.contacts.isLoading;\n\nexport const selectContactsError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterField) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterField.toLowerCase())\n    )\n);\n","import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormThumb = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  background-color: rgba(202, 202, 202, 0.8);\n  width: 480px;\n  margin: auto;\n  border: 2px outset black;\n  border-radius: 13px;\n  padding: 20px 28px;\n  margin-bottom: 28px;\n\n  /* transform: scale(0.5);\n  opacity: 0.3;\n  transition: transform 1.5s cubic-bezier(0.4, 0, 0.2, 1),\n    opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1);\n    opacity: 1;\n  } */\n\n  button {\n    font-weight: bold;\n    margin-bottom: 28px;\n    padding: 4px 8px;\n    border-radius: 22px;\n    text-transform: uppercase;\n    background-color: rgba(144, 144, 144, 0.8);\n  }\n\n  button:hover,\n  button:focus {\n    background-color: black;\n    color: white;\n  }\n\n  label {\n    font-style: oblique;\n    font-weight: 500;\n    margin-bottom: 13px;\n\n    b {\n      font-size: 13px;\n      font-style: normal;\n      font-weight: 500;\n      color: darkred;\n      text-transform: lowercase;\n    }\n\n    input {\n      margin-top: 8px;\n      width: 100%;\n      padding: 2px 13px;\n      border-radius: 13px;\n      outline: none;\n      text-align: center;\n      /* background-color: rgba(255, 255, 255, 0); */\n    }\n  }\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { fetchAddContact } from 'redux/contacts/operations';\nimport { FormThumb } from './ContactForm.styled';\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$/,\n      'Wrong name format'\n    )\n    .required('Must be filled'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Wrong number format'\n    )\n    .required('Must be filled'),\n});\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = { name: '', number: '' };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={formSchema}\n      onSubmit={(values, actions) => {\n        const enteredName = values.name;\n\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === enteredName.toLowerCase()\n          )\n        ) {\n          alert(`${enteredName} is already in contacts.`);\n          return;\n        }\n\n        dispatch(fetchAddContact({ ...values }));\n        actions.resetForm();\n      }}\n    >\n      <FormThumb>\n        <label>\n          Name\n          <Field name=\"name\" placeholder=\"Enter name\" />\n          <ErrorMessage name=\"name\" component=\"b\" />\n        </label>\n\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" placeholder=\"Enter number\" />\n          <ErrorMessage name=\"number\" component=\"b\" />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </FormThumb>\n    </Formik>\n  );\n}\n","import { HiMicrophone } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\nimport { fetchDeleteContact } from 'redux/contacts/operations';\n// import { deleteContact } from 'redux/contactsSlice';\n// import { deleteContact } from 'redux/actions';\n\nexport default function ContactItem({ contact }) {\n  // const contacts = useSelector(getContacts);\n  const { id, name, phone } = contact;\n  const dispatch = useDispatch();\n\n  const onContactDelete = () => dispatch(fetchDeleteContact(id));\n\n  return (\n    <>\n      <HiMicrophone />\n      <span>{name}</span>\n      <div>\n        <span>{phone} </span>\n        <button type=\"button\" onClick={onContactDelete}>\n          Delete\n        </button>\n      </div>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 666px;\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  margin: auto;\n  font-weight: 500;\n  /* font-style: oblique; */\n\n  li {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: black;\n    border: 2px outset darkgrey;\n    padding: 2px;\n    padding-left: 8px;\n    border-radius: 18px;\n    cursor: pointer;\n    transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover {\n      transform: scale(1.1);\n    }\n\n    span {\n      font-size: 18px;\n      font-weight: 700;\n      margin-left: 13px;\n      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n        'Lucida Sans', Arial, sans-serif;\n      margin-right: auto;\n    }\n\n    div {\n      display: flex;\n      align-items: center;\n    }\n\n    div span {\n      color: whitesmoke;\n      /* padding: 2px; */\n    }\n\n    button {\n      font-size: 13px;\n      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n        'Lucida Sans', Arial, sans-serif;\n      margin-left: 40px;\n      padding: 2px 8px;\n      color: white;\n      background-color: black;\n      border-radius: 13px;\n      transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n      &:hover {\n        background-color: transparent;\n        color: buttonborder;\n        transform: scale(1.2);\n      }\n    }\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport default function ContactList() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <li key={contact.id}>\n          <ContactItem contact={contact} />\n        </li>\n      ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Search = styled.div`\n  input {\n    margin-top: 8px;\n    margin-bottom: 22px;\n    width: 480px;\n    padding: 2px 13px;\n    border-radius: 13px;\n    text-align: center;\n    outline: none;\n  }\n\n  ::placeholder {\n    text-align: center;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { searchFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Search } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilter = newSymbol => {\n    dispatch(searchFilter(newSymbol));\n  };\n\n  return (\n    <Search>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => onChangeFilter(e.target.value)}\n        placeholder=\"Search...\"\n      />\n    </Search>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const ItemsCount = styled.span`\n  display: inline-flex;\n  justify-content: space-between;\n  /* align-items: center; */\n  width: 333px;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 600;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectTotalContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { ItemsCount } from './CountOfContacts.styled';\n\nexport default function CountOfContacts() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const totalContacts = useSelector(selectTotalContacts);\n\n  return (\n    <>\n      <ItemsCount>\n        <div>\n          Total contacts:<b> {totalContacts}</b>\n        </div>{' '}\n        <div>\n          Shown contacts:\n          <b> {visibleContacts.length}</b>\n        </div>\n      </ItemsCount>\n    </>\n  );\n}\n","export default function Message({ message }) {\n  return (\n    <>\n      <b>{message}</b>\n    </>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const ContactsGlobalStyle = createGlobalStyle`\nbody{\n      background-image: url('https://bogatyr.club/uploads/posts/2023-03/1679420906_bogatyr-club-p-biblioteka-oboi-foni-pinterest-1.jpg');\n\n}`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport CountOfContacts from 'components/CountOfContacts/CountOfContacts';\nimport Message from 'components/Message/Message';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectTotalContacts } from 'redux/contacts/selectors';\nimport { Box } from 'components/GlobalStyle';\nimport { ContactsGlobalStyle } from './Contacts.styled';\nimport { Toaster } from 'react-hot-toast';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contactsLength = useSelector(selectTotalContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <CountOfContacts />\n      <Filter />\n      {contactsLength === 0 ? (\n        <Message message=\"Oops! Contact's list is empty...\" />\n      ) : (\n        <ContactList />\n      )}\n      <ContactsGlobalStyle />\n      <Toaster />\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectTotalContacts","length","selectFilter","filter","selectVisibleContacts","createSelector","filterField","contact","name","toLowerCase","includes","FormThumb","styled","Form","_templateObject","_taggedTemplateLiteral","formSchema","Yup","shape","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","enteredName","some","alert","concat","fetchAddContact","_objectSpread","resetForm","children","_jsxs","Field","placeholder","ErrorMessage","component","type","ContactItem","_ref","id","phone","_Fragment","HiMicrophone","onClick","fetchDeleteContact","List","ContactList","visibleContacts","map","Search","Filter","value","onChange","e","newSymbol","target","searchFilter","ItemsCount","CountOfContacts","totalContacts","Message","message","ContactsGlobalStyle","createGlobalStyle","Contacts","contactsLength","useEffect","fetchContacts","Box","Helmet","Toaster"],"sourceRoot":""}